public class reverselinkedList {

    Node head;
    private int size;

    reverselinkedList(){
        size = 0;
    }

    class Node{
        int data;
        Node next;

        Node(int data){
            this.data = data;
            next = null;
            size++;
        }

    }

    ////////// add first

    public void addFirst(int data){
        Node newNode = new Node(data);

        if (head==null){
            head = newNode;
            return;
        }
        newNode.next = head;
        head = newNode;
    }

    //////////// add last
    public void addLast(int data){
        Node newNode = new Node(data);
        if (head==null){
            head = newNode;
            return;
        }
        Node lastNode = head;
        while (lastNode.next != null){
            lastNode = lastNode.next;
        }
        lastNode.next = newNode;
    }

    /////////////// remove first

    public void removeFirst(){
        if (head==null){
            System.out.println("Empty list nothing to delete");
            return;
        }
        head = head.next;
        size--;
    }

    /////////////// remove last

//    public void removeLast(){
//        if (head==null){
//            System.out.println("Empty list");
//            return;
//        }
//        if (head.next == null){
//            head = null;
//            return;
//        }
//        size--;
//        Node currentNode = head;
//        Node lastNode = head.next;
//
//        while (lastNode.next != null){
//            currentNode = currentNode.next;
//            lastNode = lastNode.next;
//        }
//        currentNode.next = null;
//    }

    public int size(){
        return size;
    }


    //////////// reverse

   

    public void reverse() {
        if(head == null || head.next == null) {
            return;
        }

        Node prevNode = head;
        Node currNode = head.next;
        while(currNode != null) {
            Node nextNode = currNode.next;
            currNode.next = prevNode;
            prevNode = currNode;
            currNode = nextNode;
        }
        head.next = null;
        head = prevNode;
    }


    /////////// print

    public void print(){
        if (head==null){
            System.out.println("Empty list");
        }

        Node currentNode = head;

        while (currentNode != null){
            System.out.print(currentNode.data+"-->");
            currentNode = currentNode.next;
        }
        System.out.println("null");
    }
    public static void main(String[] args) {
        reverselinkedList list = new reverselinkedList();
        list.addFirst(3);
        list.addFirst(2);
        list.addFirst(1);
        list.addLast(4);


//        list.removeFirst();
//        list.removeLast();

        System.out.println(list.size());

        list.reverse();

        list.print();
    }
}
